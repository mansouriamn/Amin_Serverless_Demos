			DynamoDb Streams Demo

In this demo we will demonstrate how we can capture dynamodb events like 
INSERT, MODIFY and REMOVE using a lambda function

1- Create a DynamoDb table with the following characteristics
	Table Name: Game Events
	Partition Key: playerId
	Sort Key: date

2- Create an IAM role for lambda with the following permission added
	permission: AWSLambdaDynamoDBExecutionRole
	permission: AWSLambdaBasicExecutionPolicy

3- Create a python lambda function with the role in step 2

4- Enable dynamodb streams
	a- Select the "Exports and streams" tab
	b- Enable dynamodb streams
	c- Click "Create a trigger"
	d- Select the lambda function that we created
	e- Place 100 for batch size and click "Create Trigger"

Note: DynamoDB streams will capture dynamodb events like INSERT, MODIFY and REMOVE a sample of 
a dynamodb event is in the file named dynamodb-event-sample.txt

Any item added to the database is an INSERT event
Any item changed in the database is a MODIFY event
Any item deleted from the table is a REMOVE event

5- Use the following code in your lambda function to capture INSERT, MODIFY and REMOVE events

import json

print('Loading function')

def lambda_handler(event, context):
	print('------------------------')
	print(event)
	#1. Iterate over each record
	try:
		for record in event['Records']:
			#2. Handle event by type
			if record['eventName'] == 'INSERT':
				handle_insert(record)
			elif record['eventName'] == 'MODIFY':
				handle_modify(record)
			elif record['eventName'] == 'REMOVE':
				handle_remove(record)
		print('------------------------')
		return "Success!"
	except Exception as e: 
		print(e)
		print('------------------------')
		return "Error"


def handle_insert(record):
	print("Handling INSERT Event")
	
	#3a. Get newImage content
	newImage = record['dynamodb']['NewImage']
	
	#3b. Parse values
	newPlayerId = newImage['playerId']['S']

	#3c. Print it
	print ('New row added with playerId=' + newPlayerId)

	print("Done handling INSERT Event")

def handle_modify(record):
	print("Handling MODIFY Event")

	#3a. Parse oldImage and score
	oldImage = record['dynamodb']['OldImage']
	oldScore = oldImage['score']['N']
	
	#3b. Parse oldImage and score
	newImage = record['dynamodb']['NewImage']
	newScore = newImage['score']['N']

	#3c. Check for change
	if oldScore != newScore:
		print('Scores changed - oldScore=' + str(oldScore) + ', newScore=' + str(newScore))

	print("Done handling MODIFY Event")

def handle_remove(record):
	print("Handling REMOVE Event")

	#3a. Parse oldImage
	oldImage = record['dynamodb']['OldImage']
	
	#3b. Parse values
	oldPlayerId = oldImage['playerId']['S']

	#3c. Print it
	print ('Row removed with playerId=' + oldPlayerId)

	print("Done handling REMOVE Event")

6- Now open dynamodb and add the following item to the table to trigger the handle_insert()
 function.

{
 "playerId": "1234",
 "date": "Aug 23",
 "score": "44"
}

7- Open the lambda function, open cloudwatch monitoring and review the cloudwatch logs created.

Ref: https://www.youtube.com/watch?v=RhLUyJxS8Tk